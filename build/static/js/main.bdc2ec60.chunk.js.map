{"version":3,"sources":["reportWebVitals.ts","components/MarkdownVisual.tsx","components/CodeMirror.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","setMVEditorText","editorRef","text","editor","current","get","action","ctx","view","editorViewCtx","document","parserCtx","parser","state","dispatch","tr","replace","doc","content","size","Slice","setMeta","getMVTextPreview","textContent","setMVWidth","width","editorDom","dom","style","MarkdownVisual","ref","onChange","useEditor","root","Editor","make","config","set","rootCtx","listenerCtx","markdown","getText","use","nord","commonmark","clipboard","emoji","gfm","history","listener","math","prism","slash","tooltip","forwardRef","setCMEditorText","changes","from","to","toString","length","insert","CodeMirror","extensions","base","markdownLanguage","AppWrapper","markdownVisualRef","createRef","codeMirrorRef","prevTextRef","useRef","editorKitRef","useEffect","editorKitDelegate","setEditorRawText","generateCustomPreview","plain","onNoteLockToggle","isLocked","isEditable","setProps","editable","setMVEditable","extension","push","EditorView","of","effects","StateEffect","reconfigure","setCMEditable","clearUndoHistory","EditorKit","mode","supportsFilesafe","styles","splitView","display","marginTop","rightPane","className","onClick","newDisplay","getCMDisplay","setCMStyle","lineWrapping","setCMLineWrapping","trim","onEditorValueChanged","ReactDOM","render","StrictMode","getElementById","console","log"],"mappings":"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","file":"static/js/main.bdc2ec60.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { forwardRef } from 'react';\nimport { Ctx, Editor, editorViewCtx, parserCtx, rootCtx } from '@milkdown/core';\nimport { EditorRef, ReactEditor, useEditor } from '@milkdown/react';\nimport { Slice } from 'prosemirror-model';\n\n// Milkdown editor plugins & themes\nimport { nord } from '@milkdown/theme-nord';\nimport { commonmark } from '@milkdown/preset-commonmark';\nimport { clipboard } from '@milkdown/plugin-clipboard';\nimport { emoji } from '@milkdown/plugin-emoji';\nimport { gfm } from '@milkdown/preset-gfm';\nimport { history } from '@milkdown/plugin-history';\nimport { prism } from '@milkdown/plugin-prism';\nimport { math } from '@milkdown/plugin-math';\nimport { slash } from '@milkdown/plugin-slash';\nimport { tooltip } from '@milkdown/plugin-tooltip';\nimport { listener, listenerCtx } from '@milkdown/plugin-listener';\n\ntype SetEditorTextParams = {\n  editorRef: React.MutableRefObject<EditorRef | null>;\n  text: string;\n};\n\nexport const setMVEditorText = ({ editorRef, text }: SetEditorTextParams) => {\n  const editor = editorRef.current?.get();\n  if (!editor) {\n    return;\n  }\n\n  editor.action((ctx: Ctx) => {\n    const view = ctx.get(editorViewCtx);\n    const parser = ctx.get(parserCtx);\n\n    const document = parser(text);\n    if (!document) {\n      return;\n    }\n\n    const { state } = view;\n    view.dispatch(\n      state.tr\n        .replace(0, state.doc.content.size, new Slice(document.content, 0, 0))\n        .setMeta('addToHistory', false)\n    );\n  });\n};\n\ntype SetEditableParams = {\n  editorRef: React.MutableRefObject<EditorRef | null>;\n  isEditable: boolean;\n};\n\nexport const setMVEditable = ({ editorRef, isEditable }: SetEditableParams) => {\n  const editor = editorRef.current?.get();\n  if (!editor) {\n    return;\n  }\n\n  editor.action((ctx: Ctx) => {\n    const view = ctx.get(editorViewCtx);\n    view.setProps({\n      editable: () => isEditable,\n    });\n  });\n};\n\ntype GetTextPreviewParams = {\n  editorRef: React.MutableRefObject<EditorRef | null>;\n  text: string;\n};\n\nexport const getMVTextPreview = ({ editorRef, text }: GetTextPreviewParams) => {\n  const editor = editorRef.current?.get();\n  if (!editor) {\n    return '';\n  }\n\n  return editor.action((ctx: Ctx) => {\n    const parser = ctx.get(parserCtx);\n\n    const document = parser(text);\n    if (!document) {\n      return '';\n    }\n\n    return document.textContent;\n  });\n};\n\ntype SetWidthParams = {\n  editorRef: React.MutableRefObject<EditorRef | null>;\n  width: string;\n};\n\nexport const setMVWidth = ({ editorRef, width }: SetWidthParams) => {\n  const editorDom = editorRef.current?.dom();\n  if (!editorDom) {\n    return;\n  }\n\n  editorDom.style.width = width;\n};\n\ntype MarkdownVisualProps = {\n  onChange: (text: string) => void;\n};\n\nconst MarkdownVisual = (\n  { onChange }: MarkdownVisualProps,\n  ref: React.ForwardedRef<EditorRef>\n) => {\n  const editor = useEditor((root) =>\n    Editor.make()\n      .config((ctx) => {\n        ctx.set(rootCtx, root);\n        ctx.set(listenerCtx, {\n          markdown: [\n            (getText) => {\n              const text = getText();\n              onChange(text);\n            },\n          ],\n        });\n      })\n      .use(nord)\n      .use(commonmark)\n      .use(clipboard)\n      .use(emoji)\n      .use(gfm)\n      .use(history)\n      .use(listener)\n      .use(math)\n      .use(prism)\n      .use(slash)\n      .use(tooltip)\n  );\n\n  return <ReactEditor ref={ref} editor={editor} />;\n};\n\nexport default forwardRef(MarkdownVisual);\n","import { markdown, markdownLanguage } from '@codemirror/lang-markdown';\nimport CodeMirrorReact, {\n  EditorView,\n  ReactCodeMirrorRef,\n  StateEffect,\n  ViewUpdate,\n} from '@uiw/react-codemirror';\nimport { CSSProperties, forwardRef } from 'react';\n\ntype SetEditorTextParams = {\n  editorRef: React.MutableRefObject<ReactCodeMirrorRef | null>;\n  text: string;\n};\n\nexport const setCMEditorText = ({ editorRef, text }: SetEditorTextParams) => {\n  const view = editorRef.current?.view;\n  if (!view) {\n    return;\n  }\n\n  const { state } = view;\n  if (!state) {\n    return;\n  }\n\n  const document = state?.doc;\n  if (!document) {\n    return;\n  }\n\n  view.dispatch({\n    changes: {\n      from: 0,\n      to: document.toString().length,\n      insert: text,\n    },\n  });\n};\n\ntype SetLineWrappingParams = {\n  editorRef: React.MutableRefObject<ReactCodeMirrorRef | null>;\n};\n\nexport const setCMLineWrapping = ({ editorRef }: SetLineWrappingParams) => {\n  const view = editorRef.current?.view;\n  if (!view) {\n    return;\n  }\n\n  const extension = [];\n  extension.push(EditorView.lineWrapping);\n\n  view.dispatch({\n    effects: StateEffect.reconfigure.of(extension),\n  });\n};\n\ntype SetEditableParams = {\n  editorRef: React.MutableRefObject<ReactCodeMirrorRef | null>;\n  isEditable: boolean;\n};\n\nexport const setCMEditable = ({ editorRef, isEditable }: SetEditableParams) => {\n  const view = editorRef.current?.view;\n  if (!view) {\n    return;\n  }\n\n  const extension = [];\n  extension.push(EditorView.editable.of(isEditable));\n\n  view.dispatch({\n    effects: StateEffect.reconfigure.of(extension),\n  });\n};\n\ntype SetStyleParams = {\n  editorRef: React.MutableRefObject<ReactCodeMirrorRef | null>;\n  display?: CSSStyleDeclaration['display'];\n  width?: CSSStyleDeclaration['width'];\n};\n\nexport const setCMStyle = ({ editorRef, display, width }: SetStyleParams) => {\n  const editorDom = editorRef.current?.editor;\n  if (!editorDom) {\n    return;\n  }\n\n  if (display) {\n    editorDom.style.display = display;\n  }\n\n  if (width) {\n    editorDom.style.width = width;\n  }\n};\n\ntype GetDisplayParams = {\n  editorRef: React.MutableRefObject<ReactCodeMirrorRef | null>;\n};\n\nexport const getCMDisplay = ({ editorRef }: GetDisplayParams) => {\n  const editorDom = editorRef.current?.editor;\n  if (!editorDom) {\n    return;\n  }\n\n  return editorDom.style.display;\n};\n\ntype CodeMirrorEditorProps = {\n  onChange: (text: string, viewUpdate: ViewUpdate) => void;\n  style: CSSProperties;\n};\n\nconst CodeMirror = (\n  { onChange, style }: CodeMirrorEditorProps,\n  ref: React.ForwardedRef<ReactCodeMirrorRef>\n) => {\n  const extensions = [\n    markdown({\n      base: markdownLanguage,\n    }),\n  ];\n\n  return (\n    <CodeMirrorReact\n      ref={ref}\n      extensions={extensions}\n      onChange={onChange}\n      style={style}\n    />\n  );\n};\n\nexport default forwardRef(CodeMirror);\n","import './stylesheets/main.scss';\n\nimport React, { createRef, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nimport { EditorRef } from '@milkdown/react';\nimport MarkdownVisual, {\n  setMVEditable,\n  setMVEditorText,\n  getMVTextPreview,\n  setMVWidth,\n} from './components/MarkdownVisual';\n\nimport { ReactCodeMirrorRef } from '@uiw/react-codemirror';\nimport CodeMirror, {\n  getCMDisplay,\n  setCMEditable,\n  setCMEditorText,\n  setCMLineWrapping,\n  setCMStyle,\n} from './components/CodeMirror';\n\nimport { RiBookReadLine } from 'react-icons/ri';\n\nimport EditorKit from '@standardnotes/editor-kit';\n\nconst AppWrapper: React.FC = () => {\n  const markdownVisualRef = createRef<EditorRef>();\n  const codeMirrorRef = createRef<ReactCodeMirrorRef>();\n\n  const prevTextRef = useRef('');\n  const editorKitRef = useRef<any>();\n\n  const onMilkdownChange = (text: string) => {\n    if (prevTextRef.current.trim() === text.trim()) {\n      return;\n    }\n\n    prevTextRef.current = text;\n\n    setCMEditorText({ editorRef: codeMirrorRef, text });\n    editorKitRef.current.onEditorValueChanged(text);\n  };\n\n  const onCodeMirrorChange = (text: string) => {\n    if (prevTextRef.current === text) {\n      return;\n    }\n\n    prevTextRef.current = text;\n\n    setMVEditorText({ editorRef: markdownVisualRef, text });\n    editorKitRef.current.onEditorValueChanged(text);\n  };\n\n  useEffect(() => {\n    const editorKitDelegate = {\n      setEditorRawText: (text: string) => {\n        prevTextRef.current = text;\n        setMVEditorText({ editorRef: markdownVisualRef, text });\n        setCMEditorText({ editorRef: codeMirrorRef, text });\n      },\n      generateCustomPreview: (text: string) => {\n        return {\n          plain: getMVTextPreview({ editorRef: markdownVisualRef, text }),\n        };\n      },\n      onNoteLockToggle: (isLocked: boolean) => {\n        const isEditable = !isLocked;\n        setMVEditable({ editorRef: markdownVisualRef, isEditable });\n        setCMEditable({ editorRef: codeMirrorRef, isEditable });\n      },\n      clearUndoHistory: () => {},\n    };\n\n    editorKitRef.current = new EditorKit(editorKitDelegate, {\n      mode: 'markdown',\n      supportsFilesafe: false,\n    });\n\n    setMVWidth({\n      editorRef: markdownVisualRef,\n      width: '100%',\n    });\n  });\n\n  const toggleSplitView = () => {\n    const codeMirrorDisplay = getCMDisplay({\n      editorRef: codeMirrorRef,\n    });\n\n    const newDisplay = codeMirrorDisplay === 'block' ? 'none' : 'block';\n\n    setCMStyle({\n      editorRef: codeMirrorRef,\n      display: newDisplay,\n      width: newDisplay === 'none' ? '0%' : '50%',\n    });\n\n    setMVWidth({\n      editorRef: markdownVisualRef,\n      width: newDisplay === 'none' ? '100%' : '50%',\n    });\n\n    setCMLineWrapping({\n      editorRef: codeMirrorRef,\n    });\n  };\n\n  const styles = {\n    splitView: {\n      display: 'flex',\n      marginTop: '2rem',\n    },\n    rightPane: {\n      width: '50%',\n      display: 'none',\n    },\n  };\n\n  return (\n    <>\n      <div className=\"app-header\">\n        <RiBookReadLine\n          className=\"toggle-button\"\n          onClick={toggleSplitView}\n          size={32}\n        />\n      </div>\n      <div style={styles.splitView}>\n        <MarkdownVisual ref={markdownVisualRef} onChange={onMilkdownChange} />\n        <CodeMirror\n          ref={codeMirrorRef}\n          onChange={onCodeMirrorChange}\n          style={styles.rightPane}\n        />\n      </div>\n    </>\n  );\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppWrapper />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}