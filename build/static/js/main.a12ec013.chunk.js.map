{"version":3,"sources":["components/MarkdownVisual.tsx","reportWebVitals.ts","index.tsx"],"names":["setEditorText","editorRef","text","editor","current","get","action","ctx","view","editorViewCtx","document","parserCtx","parser","state","dispatch","tr","replace","doc","content","size","Slice","setMeta","setEditable","isEditable","setProps","editable","MarkdownVisual","ref","onChange","useEditor","root","Editor","make","config","set","rootCtx","listenerCtx","markdown","getText","use","nord","commonmark","clipboard","emoji","gfm","history","listener","math","prism","slash","tooltip","forwardRef","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","MarkdownVisualWrapper","createRef","prevTextRef","useRef","editorKitRef","useEffect","editorKitDelegate","setEditorRawText","generateCustomPreview","value","kbSize","Buffer","byteLength","html","toLocaleString","minimumFractionDigits","maximumFractionDigits","onNoteLockToggle","isLocked","clearUndoHistory","EditorKit","mode","supportsFilesafe","onEditorValueChanged","ReactDOM","render","StrictMode","getElementById","console","log"],"mappings":"8VAuBaA,EAAgB,SAAC,GAA8C,IAAD,EAA3CC,EAA2C,EAA3CA,UAAWC,EAAgC,EAAhCA,KACnCC,EAAM,UAAGF,EAAUG,eAAb,aAAG,EAAmBC,MAC7BF,GAILA,EAAOG,QAAO,SAACC,GACb,IAAMC,EAAOD,EAAIF,IAAII,KAGfC,EAFSH,EAAIF,IAAIM,IAENC,CAAOV,GACxB,GAAKQ,EAAL,CAL0B,IASlBG,EAAUL,EAAVK,MACRL,EAAKM,SACHD,EAAME,GACHC,QAAQ,EAAGH,EAAMI,IAAIC,QAAQC,KAAM,IAAIC,IAAMV,EAASQ,QAAS,EAAG,IAClEG,QAAQ,gBAAgB,SAUpBC,EAAc,SAAC,GAAkD,IAAD,EAA/CrB,EAA+C,EAA/CA,UAAWsB,EAAoC,EAApCA,WACjCpB,EAAM,UAAGF,EAAUG,eAAb,aAAG,EAAmBC,MAC7BF,GAILA,EAAOG,QAAO,SAACC,GACAA,EAAIF,IAAII,KAChBe,SAAS,CACZC,SAAU,kBAAMF,SAShBG,EAAiB,SAAC,EAEtBC,GACI,IAFFC,EAEC,EAFDA,SAGIzB,EAAS0B,aAAU,SAACC,GAAD,OACvBC,IAAOC,OACJC,QAAO,SAAC1B,GACPA,EAAI2B,IAAIC,IAASL,GACjBvB,EAAI2B,IAAIE,IAAa,CACnBC,SAAU,CACR,SAACC,GACC,IAAMpC,EAAOoC,IACbV,EAAS1B,UAKhBqC,IAAIC,KACJD,IAAIE,KACJF,IAAIG,KACJH,IAAII,KACJJ,IAAIK,KACJL,IAAIM,KACJN,IAAIO,KACJP,IAAIQ,KACJR,IAAIS,KACJT,IAAIU,KACJV,IAAIW,QAGT,OAAO,cAAC,IAAD,CAAavB,IAAKA,EAAKxB,OAAQA,KAGzBgD,yBAAWzB,I,iCCzFX0B,IAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,gJCKRQ,EAAkC,WACtC,IAAM5D,EAAY6D,sBACZC,EAAcC,iBAAO,IACrBC,EAAeD,mBA6CrB,OAlCAE,qBAAU,WACR,IAAMC,EAAoB,CACxBC,iBAAkB,SAAClE,GACjB6D,EAAY3D,QAAUF,EACtBF,YAAc,CAAEC,YAAWC,UAE7BmE,sBAAuB,SAACnE,GACtB,IAAgBoE,EAMVC,EAASC,EAAOC,WAAWvE,GAAQ,KAEzC,MAAO,CACLwE,KACE,kBAVYJ,EAUKC,EATnBD,EAAMK,eAAe,QAAS,CAC5BC,sBAAuB,EACvBC,sBAAuB,KAOvB,6BACA,sDAGNC,iBAAkB,SAACC,GACjB,IAAMxD,GAAcwD,EACpBzD,YAAY,CAAErB,YAAWsB,gBAE3ByD,iBAAkB,cAGpBf,EAAa7D,QAAU,IAAI6E,IAAUd,EAAmB,CACtDe,KAAM,WACNC,kBAAkB,MAEnB,CAAClF,IAEG,cAAC,IAAD,CAAgB0B,IAAK1B,EAAW2B,SA3CtB,SAAC1B,GACZ6D,EAAY3D,UAAYF,IAI5B6D,EAAY3D,QAAUF,EACtB+D,EAAa7D,QAAQgF,qBAAqBlF,QAwC9CmF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC1B,EAAD,MAEFnD,SAAS8E,eAAe,SAM1BpC,YAAgBqC,QAAQC,M","file":"static/js/main.a12ec013.chunk.js","sourcesContent":["import React, { forwardRef } from 'react';\nimport { Ctx, Editor, editorViewCtx, parserCtx, rootCtx } from '@milkdown/core';\nimport { EditorRef, ReactEditor, useEditor } from '@milkdown/react';\nimport { Slice } from 'prosemirror-model';\n\n// Milkdown editor plugins & themes\nimport { nord } from '@milkdown/theme-nord';\nimport { commonmark } from '@milkdown/preset-commonmark';\nimport { clipboard } from '@milkdown/plugin-clipboard';\nimport { emoji } from '@milkdown/plugin-emoji';\nimport { gfm } from '@milkdown/preset-gfm';\nimport { history } from '@milkdown/plugin-history';\nimport { prism } from '@milkdown/plugin-prism';\nimport { math } from '@milkdown/plugin-math';\nimport { slash } from '@milkdown/plugin-slash';\nimport { tooltip } from '@milkdown/plugin-tooltip';\nimport { listener, listenerCtx } from '@milkdown/plugin-listener';\n\ntype SetEditorTextParams = {\n  editorRef: React.MutableRefObject<EditorRef | null>;\n  text: string;\n};\n\nexport const setEditorText = ({ editorRef, text }: SetEditorTextParams) => {\n  const editor = editorRef.current?.get();\n  if (!editor) {\n    return;\n  }\n\n  editor.action((ctx: Ctx) => {\n    const view = ctx.get(editorViewCtx);\n    const parser = ctx.get(parserCtx);\n\n    const document = parser(text);\n    if (!document) {\n      return;\n    }\n\n    const { state } = view;\n    view.dispatch(\n      state.tr\n        .replace(0, state.doc.content.size, new Slice(document.content, 0, 0))\n        .setMeta('addToHistory', false)\n    );\n  });\n};\n\ntype SetEditableParams = {\n  editorRef: React.MutableRefObject<EditorRef | null>;\n  isEditable: boolean;\n};\n\nexport const setEditable = ({ editorRef, isEditable }: SetEditableParams) => {\n  const editor = editorRef.current?.get();\n  if (!editor) {\n    return;\n  }\n\n  editor.action((ctx: Ctx) => {\n    const view = ctx.get(editorViewCtx);\n    view.setProps({\n      editable: () => isEditable,\n    });\n  });\n};\n\ntype MarkdownVisualProps = {\n  onChange: (text: string) => void;\n};\n\nconst MarkdownVisual = (\n  { onChange }: MarkdownVisualProps,\n  ref: React.ForwardedRef<EditorRef>\n) => {\n  const editor = useEditor((root) =>\n    Editor.make()\n      .config((ctx) => {\n        ctx.set(rootCtx, root);\n        ctx.set(listenerCtx, {\n          markdown: [\n            (getText) => {\n              const text = getText();\n              onChange(text);\n            },\n          ],\n        });\n      })\n      .use(nord)\n      .use(commonmark)\n      .use(clipboard)\n      .use(emoji)\n      .use(gfm)\n      .use(history)\n      .use(listener)\n      .use(math)\n      .use(prism)\n      .use(slash)\n      .use(tooltip)\n  );\n\n  return <ReactEditor ref={ref} editor={editor} />;\n};\n\nexport default forwardRef(MarkdownVisual);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './stylesheets/main.scss';\n\nimport React, { createRef, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nimport { EditorRef } from '@milkdown/react';\n\nimport EditorKit from '@standardnotes/editor-kit';\nimport MarkdownVisual, {\n  setEditable,\n  setEditorText,\n} from './components/MarkdownVisual';\n\nconst MarkdownVisualWrapper: React.FC = () => {\n  const editorRef = createRef<EditorRef>();\n  const prevTextRef = useRef('');\n  const editorKitRef = useRef<any>();\n\n  const onChange = (text: string) => {\n    if (prevTextRef.current === text) {\n      return;\n    }\n\n    prevTextRef.current = text;\n    editorKitRef.current.onEditorValueChanged(text);\n  };\n\n  useEffect(() => {\n    const editorKitDelegate = {\n      setEditorRawText: (text: string) => {\n        prevTextRef.current = text;\n        setEditorText({ editorRef, text });\n      },\n      generateCustomPreview: (text: string) => {\n        const format = (value: number) =>\n          value.toLocaleString('en-US', {\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 2,\n          });\n\n        const kbSize = Buffer.byteLength(text) / 1024;\n\n        return {\n          html:\n            `<span>~${format(kbSize)} KB worth of text.</span>` +\n            '<div><em>Created with Markdown Visual.</em></div>',\n        };\n      },\n      onNoteLockToggle: (isLocked: boolean) => {\n        const isEditable = !isLocked;\n        setEditable({ editorRef, isEditable });\n      },\n      clearUndoHistory: () => {},\n    };\n\n    editorKitRef.current = new EditorKit(editorKitDelegate, {\n      mode: 'markdown',\n      supportsFilesafe: false,\n    });\n  }, [editorRef]);\n\n  return <MarkdownVisual ref={editorRef} onChange={onChange} />;\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <MarkdownVisualWrapper />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}